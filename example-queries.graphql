Simple object queries

query{
  books {
    id
    title
    publication_date
  }
}

Nested object queries

query{
  books {
    id
    title
    publication_date
    person {
      name
    }
  }
}

query{
  books {
    id
    title
    publication_date
    genre {
      id
      type
    }
  }
}

Fetch nested objects using an array relationship

query{
  persons {
    id
    name
    books {
      id
      title
      price
      publication_date
    }
  }
}

Aggregation queries

Fetch aggregated data of an object

query{
  books_aggregate {
    aggregate {
      max {
        price
      }
      min {
        publication_date
      }
      sum {
        id
      }
    }
  }
}

Fetch aggregated data on nested objects

query{
  persons(where: {id: {_eq: 5}}) {
    id
    name
    age
    books_aggregate {
      aggregate {
        max {
          price
        }
        min {
          publication_date
        }
      }
    }
  }
}

Filter query results / search queries

query{
  persons(where: {books: {publication_date: {_gt: "2000-01-01"}, price: {_gt: "100"}}}) {
    id
    name
  }
}

Some of the available filtering options-

Equality operators (_eq, _neq)

Greater than or less than operators (_gt, _lt, _gte, _lte)

List based search operators (_in, _nin)

Text search or pattern matching operators (_like, _similar, etc.)

JSONB operators (_contains, _has_key, etc.)

PostGIS spatial relationship operators (_st_contains, _st_crosses, etc.)

Filter or check for null values (_is_null)

Filter based on failure of some criteria (_not)

Using multiple filters in the same query (_and, _or)

Filter nested objects

Filter based on nested objects’ fields

Filter based on existence of nested objects

Cast a field to a different type before filtering (_cast)

Intersect operators on RASTER columns


Sorting objects

query{
  persons(order_by: {age: asc}) {
    id
    name
    age
  }
}

Sorting nested objects

query{
  persons(order_by: {name: desc}) {
    id
    name
    age
    books(order_by: {publication_date: asc}) {
      id
      title
      publication_date
      genre {
        type
      }
    }
  }
}

Sorting based on nested object’s fields

query{
  books(order_by: {person: {age: asc}}) {
    id
    title
    publication_date
    person {
      id
      name
      age
    }
  }
}

For Array relationships

query{
  persons(order_by: {books_aggregate: {count: desc}}) {
    id
    name
    city
    books_aggregate {
      aggregate {
        count
      }
    }
  }
}

Using multiple arguments in a query

query{
  persons {
    id
    name
    age
    books(where: {publication_date: {_gte: "2000-01-01"}}, order_by: {publication_date: asc}, limit: 2) {
      id
      title
      genre {
        type
      }
    }
  }
}

Using variables / aliases in queries

Using variables

query getBooks($person_id: Int!) {
  books(where: {person_id: {_eq: $person_id}}) {
    id
    title
    price
  }
}

Query Variables-

{
  "person_id": 1
}

 

Using aliases

query getBooks {
  books {
    id
    title
    price
  }
  topTwoBooksByPrice: books(order_by: {price: desc}, limit: 2) {
    id
    title
    price
  }
  firstPublishedBook: books(order_by: {publication_date: asc}, limit: 1) {
    title
    price
    publication_date
  }
}

Mutations

Insert mutation- inserting a single object

 

mutation insert_books {

  insert_books(
    objects: [
      {
        person_id: 2,
        genre_id : 3,
        title: "Article 1",
        price: "200",
        publication_date: "2019-11-11"
      }
    ]
  ) {
    returning {
      id
      title
    }
  }
}

Using variables
 
mutation insert_books($objects: [books_insert_input!]!) {

  insert_books(objects: $objects) {
    returning {
      id
      title
    }
  }
}

Query Variables-
{
  "objects": [
    {
        "person_id": 2,
        "genre_id": 3,
        "title": "Article 77",
        "price": "500",
        "publication_date": "2018-11-11"
      }
  ]
}

Insert multiple objects of the same type in the same mutation

mutation insert_books {
  insert_books(
    objects: [
      {
        person_id: 2,
        genre_id : 3,
        title: "Article 1",
        price: "200",
        publication_date: "2019-11-11"
      },
      {
        person_id: 4,
        genre_id : 5,
        title: "Article 99",
        price: "300",
        publication_date: "2019-12-11"
      }
    ]
  ) {
    returning {
      id
      title
    }
  }
}
 

Insert an object along with its related objects through relationships

mutation insertData {
  insert_persons(objects: [{name: "John", phone: "234565", city: "Nevada", age: 37,
  books: {data: {genre_id: 5, title: "Some title", publication_date: "2019-01-01", price: "300"}}}]) {
    affected_rows
    returning {
      id
      name
      books {
        id
        person_id
        title
      }
    }
  }
}

Upsert mutation

mutation upsert_books {
  insert_books (
    objects: [
      {
        id: 9
        person_id: 4,
        title: "que sera sera",
        price: 250,
        genre_id: 2,
        publication_date: "2019-10-12"
      }
    ],
    on_conflict: {
      constraint: books_pkey,
      update_columns: [title, publication_date]
    }
  ) {
    returning {
      id
      title
      price
      publication_date
    }
  }
}

Upsert in nested mutations

mutation upsert_persons_books {
  insert_persons(
    objects: [
      {
        name: "Jeff Stevens",
        age: 45,
        city: "California",
        phone: "234567",
        books: {
          data: [
            {
             id: 9,
        		 title: "que sera sera",
        		 price: 250,
        		 genre_id: 2,
        		 publication_date: "2019-10-12"
            }
          ],
          on_conflict: {
            constraint: books_pkey,
            update_columns: [title, publication_date]
          }
        }
      }
    ]
  ) {
    affected_rows
  }
}

Update Mutations

mutation update_persons{
  update_persons(where: {name: {_eq: "John Doe"}}, _set: {phone: "78787878"}) {
    affected_rows
    returning {
      name
      phone
    }
  }
}

Update with variables
mutation update_persons($name: String, $changes: persons_set_input){
  update_persons(where: {name: {_eq: "John Doe"}}, 
    _set: $changes) {
    affected_rows
    returning {
      name
      phone
      age
    }
  }
}
Variables
{
  "name": "John Doe",
  "changes": {
    "phone": "345678",
    "age": 35
  }
}

To send in rest api-
POST: http://sub-test-postgres.herokuapp.com/v1/graphql
Headers:x-hasura-access-key, content-type
Body:
{
  "query": "mutation update_persons($name: String, $changes: persons_set_input){update_persons(where: {name: {_eq: \"John Doe\"}},   _set: $changes) {   affected_rows    returning {     name     phone     age    }  }}",
  "variables": {
    "name": "John Doe",
    "changes": {
      "phone": "345678",
      "age": 35
    }
  },
  "operationName": "update_persons"
}

Update based on a nested object’s fields
mutation {
  update_books(where: {person: {name: {_eq: "Alan Smith"}}}, _set: {title: "Test title"}) {
    affected_rows
  }
}

Delete Mutation
mutation {
  delete_books(where: {person_id: {_eq: 4}}) {
    affected_rows
  }
}

Delete based on a nested object’s fields
mutation {
  delete_books(where: {person: {name: {_eq: "John Doe"}}}) {
    affected_rows
  }
}

Subscriptions
We can convert any query into a subscription by simply replacing query with subscription as the operation type

subscription getLocation {
  subscription_vehicle(where: {id: {_eq: 3}}) {
    id
    vehicle_number
    vehicle_locations(order_by: {timestamp: desc}, limit: 1) {
      location
      timestamp
    }
  }
}

